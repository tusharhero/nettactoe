#!/bin/bash
# nettactoe.sh - Netcat Tic Tac Toe
# Copyright (C) 2024 tusharhero

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

if ! command -v clear >/dev/null 2>&1
then
    function clear {
	printf '\033c'
    }
fi

function max {
    [ "$1" -gt "$2" ] && echo "$1" || echo "$2"
}

function min {
    [ "$1" -lt "$2" ] && echo "$1" || echo "$2"
}

function clamp {
    if [ "$1" -lt "$2" ]; then
        echo "$2"
    elif [ "$1" -gt "$3" ]; then
        echo "$3"
    else
        echo "$1"
    fi
}

function get_row {
    cut -d';' -f "$2" <<< "$1"
}

function get_cell {
    cut -d',' -f "$2" <<< "$1"
}

function get_array_element {
    local array=$1
    local y=$2
    local x=$3
    local row
    row=$(get_row "$array" "$y")
    local element
    element=$(get_cell "$row" "$x")
    echo "$element"
}

function set_array_element {
    local array=$1
    local y=$2
    local x=$3
    local newvalue=$4
    local row
    row=$(get_row "$array" "$y")
    row=$(awk -F "," -v newvalue="$newvalue" -v x="$x" 'BEGIN{FS=OFS=","} {$x=newvalue; print}' <<< "$row" )
    array=$(awk -F ";" -v newvalue="$row" -v y="$y" 'BEGIN{FS=OFS=";"} {$y=newvalue; print}' <<< "$array")
    echo "$array"
}

function render_array {
    printf "$(sed -e 's/,//g' -e 's/;/\\n/g' <<< "$1")\n"
}

function check_game {
    local array=$1
    for y in {1..3}; do
	[ "$(get_array_element "$array" "$y" 1)" == "⬛️" ] || \
	    { [ "$(get_array_element "$array" "$y" 1)" == "$(get_array_element "$array" "$y" 2)" ] && \
		  [ "$(get_array_element "$array" "$y" 2)" == "$(get_array_element "$array" "$y" 3)" ] && \
		  { printf '%s' "$(get_array_element "$array" "$y" 1)"; return 0; } }
    done
    for x in {1..3}; do
	[ "$(get_array_element "$array" 1 "$x")" == "⬛️" ] || \
	    { [ "$(get_array_element "$array" 1 "$x")" == "$(get_array_element "$array" 2 "$x")" ] && \
		  [ "$(get_array_element "$array" 2 "$x")" == "$(get_array_element "$array" 3 "$x")" ] && \
		  { printf '%s' "$(get_array_element "$array" 1 "$x")"; return 0; } }
    done
    [ "$(get_array_element "$array" 2 2)" == "⬛️" ] || \
	{ { [ "$(get_array_element "$array" 1 1)" == "$(get_array_element "$array" 2 2)" ] && \
		[ "$(get_array_element "$array" 2 2)" == "$(get_array_element "$array" 3 3)" ]; } || \
	      { [ "$(get_array_element "$array" 3 1)" == "$(get_array_element "$array" 2 2)" ] && \
		    [ "$(get_array_element "$array" 2 2)" == "$(get_array_element "$array" 1 3)" ]; } && \
		  { printf '%s' "$(get_array_element "$array" 2 2)"; return 0; }; }

    [ "$(printf '%s' "$array" | sed 's/[^⬛]//g' | wc --chars)" == '0' ] && { printf 'no one'; return 0;}
}

function make_move {
    local game=$1
    local player=$2
    local move=$3

    local y
    y=$(cut -d"," -f 1 <<< "$move")
    y=$(clamp "$y" 1 3)

    local x
    x=$(cut -d"," -f 2 <<< "$move")
    x=$(clamp "$x" 1 3)

    block="$(get_array_element "$game" "$y" "$x")"
    if [ "$block" == "⭕" ] || [ "$block" == "❌" ]; then
	read -rp "That block is preoccupied, please enter new move: " move
	make_move "$game" "$player" "$move"
    else
	set_array_element "$game" "$y" "$x" "$player"
    fi
}

function restart_game {

    [ -z "$result" ] && return 0
    clear
    render_array "$game"
    echo "$result" won!
    read -rp 'Do you want to play again? [y/N] ' restart

    if [ "$restart" == 'Y' ] || [ "$restart" == 'y' ]; then
	echo 'restarting game!'
	game="$new_game"
	no_moves=0
    else
	exit
    fi
}

function server {
    read -p "Enter the port to use for the nettactoe server: " -i "4444" -e server_port
    coproc SERVER { nc -l -p $server_port ; }
    echo "Waiting for a client to join.."
    read <&"${SERVER[0]}"
    echo "client has joined!"
    new_game="⬛,⬛,⬛️;⬛️,⬛️,⬛️;⬛️,⬛️,⬛️"
    game="$new_game"
    no_moves=0

    while true; do
        clear
        render_array "$game"
        echo "$game" >&"${SERVER[1]}"

        result=$(check_game "$game")
        restart_game

        player=$( ((no_moves % 2 == 0)) && echo "⭕" || echo "❌" )
        if [ "$player" = "⭕" ]; then
            read -rp "$player Enter move: " move
            game=$(make_move "$game" "$player" "$move");
        else
            echo "Waiting for ❌ to make a move"
            read -r game <&"${SERVER[0]}"
        fi

        no_moves=$((no_moves + 1))
    done
}

function client {
    read -p "Enter the IP address of the server: " -i "localhost" -e server_ip
    read -p "Enter the port of nettactoe server: " -i "4444" -e server_port
    coproc CLIENT { nc $server_ip $server_port; }
    echo "Connected" >&"${CLIENT[1]}"
    no_moves=0

    while true; do
        read -r game <&"${CLIENT[0]}"
        clear
        render_array "$game"

        result=$(check_game "$game")
        restart_game

        player=$( ((no_moves % 2 == 0)) && echo "⭕" || echo "❌" )
        if [ "$player" = "❌" ]; then
            read -rp "$player Enter move: " move
            game=$(make_move "$game" "$player" "$move");
            echo "$game" >&"${CLIENT[1]}"
        else
            echo "Waiting for ⭕ to make a move"
        fi

        no_moves=$((no_moves + 1))
    done
}

function splash_screen {
    printf "
███    ██ ███████ ████████ ████████  █████   ██████ ████████  ██████  ███████ 
████   ██ ██         ██       ██    ██   ██ ██         ██    ██    ██ ██      
██ ██  ██ █████      ██       ██    ███████ ██         ██    ██    ██ █████   
██  ██ ██ ██         ██       ██    ██   ██ ██         ██    ██    ██ ██      
██   ████ ███████    ██       ██    ██   ██  ██████    ██     ██████  ███████ 
"                                                                              
    printf "Copyright (C) 2024 tusharhero\n\n"
    printf "Hit return to start\n"
    read -r
    clear
}

splash_screen

cat <<EOL
Start a nettactoe server (client can connect to it): server
Connect to a nettactoe server: client
EOL

read -rp ": " mode
case "$mode" in
    [C,c]* ) client ;;
    [S,s]* ) server ;;
    * ) echo "I don't know what mode you are talking about." ;;
esac
